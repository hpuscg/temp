// Code generated by gowsdl DO NOT EDIT.

package myservice

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type Forward2WorkflowRequest struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn forward2WorkflowRequest"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 string `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 string `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 int32 `xml:"in3,omitempty" json:"in3,omitempty"`

	In4 string `xml:"in4,omitempty" json:"in4,omitempty"`
}

type Forward2WorkflowRequestResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn forward2WorkflowRequestResponse"`

	Out string `xml:"out,omitempty" json:"out,omitempty"`
}

type GetAllWorkflowRequestList struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getAllWorkflowRequestList"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 int32 `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 int32 `xml:"in3,omitempty" json:"in3,omitempty"`

	In4 *ArrayOfString `xml:"in4,omitempty" json:"in4,omitempty"`
}

type GetAllWorkflowRequestListResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getAllWorkflowRequestListResponse"`

	Out *ArrayOfWorkflowRequestInfo `xml:"out,omitempty" json:"out,omitempty"`
}

type GetWorkflowRequest struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getWorkflowRequest"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 int32 `xml:"in2,omitempty" json:"in2,omitempty"`
}

type GetWorkflowRequestResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getWorkflowRequestResponse"`

	Out *WorkflowRequestInfo `xml:"out,omitempty" json:"out,omitempty"`
}

type GetHendledWorkflowRequestList struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getHendledWorkflowRequestList"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 int32 `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 int32 `xml:"in3,omitempty" json:"in3,omitempty"`

	In4 *ArrayOfString `xml:"in4,omitempty" json:"in4,omitempty"`
}

type GetHendledWorkflowRequestListResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getHendledWorkflowRequestListResponse"`

	Out *ArrayOfWorkflowRequestInfo `xml:"out,omitempty" json:"out,omitempty"`
}

type GetToDoWorkflowRequestList struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getToDoWorkflowRequestList"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 int32 `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 int32 `xml:"in3,omitempty" json:"in3,omitempty"`

	In4 *ArrayOfString `xml:"in4,omitempty" json:"in4,omitempty"`
}

type GetToDoWorkflowRequestListResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getToDoWorkflowRequestListResponse"`

	Out *ArrayOfWorkflowRequestInfo `xml:"out,omitempty" json:"out,omitempty"`
}

type GetWorkflowRequest4split struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getWorkflowRequest4split"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 int32 `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 int32 `xml:"in3,omitempty" json:"in3,omitempty"`
}

type GetWorkflowRequest4splitResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getWorkflowRequest4splitResponse"`

	Out *WorkflowRequestInfo `xml:"out,omitempty" json:"out,omitempty"`
}

type SubmitWorkflowRequest struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn submitWorkflowRequest"`

	In0 *WorkflowRequestInfo `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 int32 `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 string `xml:"in3,omitempty" json:"in3,omitempty"`

	In4 string `xml:"in4,omitempty" json:"in4,omitempty"`
}

type SubmitWorkflowRequestResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn submitWorkflowRequestResponse"`

	Out string `xml:"out,omitempty" json:"out,omitempty"`
}

type GetHendledWorkflowRequestCount struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getHendledWorkflowRequestCount"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 *ArrayOfString `xml:"in1,omitempty" json:"in1,omitempty"`
}

type GetHendledWorkflowRequestCountResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getHendledWorkflowRequestCountResponse"`

	Out int32 `xml:"out,omitempty" json:"out,omitempty"`
}

type GetLeaveDays struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getLeaveDays"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 string `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 string `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 string `xml:"in3,omitempty" json:"in3,omitempty"`

	In4 string `xml:"in4,omitempty" json:"in4,omitempty"`
}

type GetLeaveDaysResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getLeaveDaysResponse"`

	Out string `xml:"out,omitempty" json:"out,omitempty"`
}

type GetCreateWorkflowList struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCreateWorkflowList"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 int32 `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 int32 `xml:"in3,omitempty" json:"in3,omitempty"`

	In4 int32 `xml:"in4,omitempty" json:"in4,omitempty"`

	In5 *ArrayOfString `xml:"in5,omitempty" json:"in5,omitempty"`
}

type GetCreateWorkflowListResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCreateWorkflowListResponse"`

	Out *ArrayOfWorkflowBaseInfo `xml:"out,omitempty" json:"out,omitempty"`
}

type GetCreateWorkflowCount struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCreateWorkflowCount"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 *ArrayOfString `xml:"in2,omitempty" json:"in2,omitempty"`
}

type GetCreateWorkflowCountResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCreateWorkflowCountResponse"`

	Out int32 `xml:"out,omitempty" json:"out,omitempty"`
}

type GetProcessedWorkflowRequestCount struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getProcessedWorkflowRequestCount"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 *ArrayOfString `xml:"in1,omitempty" json:"in1,omitempty"`
}

type GetProcessedWorkflowRequestCountResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getProcessedWorkflowRequestCountResponse"`

	Out int32 `xml:"out,omitempty" json:"out,omitempty"`
}

type ForwardWorkflowRequest struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn forwardWorkflowRequest"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 string `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 string `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 int32 `xml:"in3,omitempty" json:"in3,omitempty"`

	In4 string `xml:"in4,omitempty" json:"in4,omitempty"`
}

type ForwardWorkflowRequestResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn forwardWorkflowRequestResponse"`

	Out string `xml:"out,omitempty" json:"out,omitempty"`
}

type DoCreateWorkflowRequest struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn doCreateWorkflowRequest"`

	In0 *WorkflowRequestInfo `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`
}

type DoCreateWorkflowRequestResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn doCreateWorkflowRequestResponse"`

	Out string `xml:"out,omitempty" json:"out,omitempty"`
}

type DoForceOver struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn doForceOver"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`
}

type DoForceOverResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn doForceOverResponse"`

	Out string `xml:"out,omitempty" json:"out,omitempty"`
}

type GetCCWorkflowRequestCount struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCCWorkflowRequestCount"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 *ArrayOfString `xml:"in1,omitempty" json:"in1,omitempty"`
}

type GetCCWorkflowRequestCountResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCCWorkflowRequestCountResponse"`

	Out int32 `xml:"out,omitempty" json:"out,omitempty"`
}

type GetProcessedWorkflowRequestList struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getProcessedWorkflowRequestList"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 int32 `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 int32 `xml:"in3,omitempty" json:"in3,omitempty"`

	In4 *ArrayOfString `xml:"in4,omitempty" json:"in4,omitempty"`
}

type GetProcessedWorkflowRequestListResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getProcessedWorkflowRequestListResponse"`

	Out *ArrayOfWorkflowRequestInfo `xml:"out,omitempty" json:"out,omitempty"`
}

type GetAllWorkflowRequestCount struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getAllWorkflowRequestCount"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 *ArrayOfString `xml:"in1,omitempty" json:"in1,omitempty"`
}

type GetAllWorkflowRequestCountResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getAllWorkflowRequestCountResponse"`

	Out int32 `xml:"out,omitempty" json:"out,omitempty"`
}

type GetCreateWorkflowRequestInfo struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCreateWorkflowRequestInfo"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`
}

type GetCreateWorkflowRequestInfoResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCreateWorkflowRequestInfoResponse"`

	Out *WorkflowRequestInfo `xml:"out,omitempty" json:"out,omitempty"`
}

type GetMyWorkflowRequestList struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getMyWorkflowRequestList"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 int32 `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 int32 `xml:"in3,omitempty" json:"in3,omitempty"`

	In4 *ArrayOfString `xml:"in4,omitempty" json:"in4,omitempty"`
}

type GetMyWorkflowRequestListResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getMyWorkflowRequestListResponse"`

	Out *ArrayOfWorkflowRequestInfo `xml:"out,omitempty" json:"out,omitempty"`
}

type GetCreateWorkflowTypeList struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCreateWorkflowTypeList"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 int32 `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 int32 `xml:"in3,omitempty" json:"in3,omitempty"`

	In4 *ArrayOfString `xml:"in4,omitempty" json:"in4,omitempty"`
}

type GetCreateWorkflowTypeListResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCreateWorkflowTypeListResponse"`

	Out *ArrayOfWorkflowBaseInfo `xml:"out,omitempty" json:"out,omitempty"`
}

type GetMyWorkflowRequestCount struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getMyWorkflowRequestCount"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 *ArrayOfString `xml:"in1,omitempty" json:"in1,omitempty"`
}

type GetMyWorkflowRequestCountResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getMyWorkflowRequestCountResponse"`

	Out int32 `xml:"out,omitempty" json:"out,omitempty"`
}

type GetWorkflowNewFlag struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getWorkflowNewFlag"`

	In0 *ArrayOfString `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 string `xml:"in1,omitempty" json:"in1,omitempty"`
}

type GetWorkflowNewFlagResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getWorkflowNewFlagResponse"`

	Out *ArrayOfString `xml:"out,omitempty" json:"out,omitempty"`
}

type WriteWorkflowReadFlag struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn writeWorkflowReadFlag"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 string `xml:"in1,omitempty" json:"in1,omitempty"`
}

type WriteWorkflowReadFlagResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn writeWorkflowReadFlagResponse"`
}

type GetToDoWorkflowRequestCount struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getToDoWorkflowRequestCount"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 *ArrayOfString `xml:"in1,omitempty" json:"in1,omitempty"`
}

type GetToDoWorkflowRequestCountResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getToDoWorkflowRequestCountResponse"`

	Out int32 `xml:"out,omitempty" json:"out,omitempty"`
}

type GivingOpinions struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn givingOpinions"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 string `xml:"in2,omitempty" json:"in2,omitempty"`
}

type GivingOpinionsResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn givingOpinionsResponse"`

	Out string `xml:"out,omitempty" json:"out,omitempty"`
}

type GetCreateWorkflowTypeCount struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCreateWorkflowTypeCount"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 *ArrayOfString `xml:"in1,omitempty" json:"in1,omitempty"`
}

type GetCreateWorkflowTypeCountResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCreateWorkflowTypeCountResponse"`

	Out int32 `xml:"out,omitempty" json:"out,omitempty"`
}

type GetWorkflowRequestLogs struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getWorkflowRequestLogs"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 string `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 int32 `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 int32 `xml:"in3,omitempty" json:"in3,omitempty"`

	In4 int32 `xml:"in4,omitempty" json:"in4,omitempty"`
}

type GetWorkflowRequestLogsResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getWorkflowRequestLogsResponse"`

	Out *ArrayOfWorkflowRequestLog `xml:"out,omitempty" json:"out,omitempty"`
}

type DeleteRequest struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn deleteRequest"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`
}

type DeleteRequestResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn deleteRequestResponse"`

	Out bool `xml:"out,omitempty" json:"out,omitempty"`
}

type GetCCWorkflowRequestList struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCCWorkflowRequestList"`

	In0 int32 `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 int32 `xml:"in1,omitempty" json:"in1,omitempty"`

	In2 int32 `xml:"in2,omitempty" json:"in2,omitempty"`

	In3 int32 `xml:"in3,omitempty" json:"in3,omitempty"`

	In4 *ArrayOfString `xml:"in4,omitempty" json:"in4,omitempty"`
}

type GetCCWorkflowRequestListResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getCCWorkflowRequestListResponse"`

	Out *ArrayOfWorkflowRequestInfo `xml:"out,omitempty" json:"out,omitempty"`
}

type GetUserId struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getUserId"`

	In0 string `xml:"in0,omitempty" json:"in0,omitempty"`

	In1 string `xml:"in1,omitempty" json:"in1,omitempty"`
}

type GetUserIdResponse struct {
	XMLName xml.Name `xml:"webservices.services.weaver.com.cn getUserIdResponse"`

	Out string `xml:"out,omitempty" json:"out,omitempty"`
}

type ArrayOfString struct {
	Astring []string `xml:"string,omitempty" json:"string,omitempty"`
}

type ArrayOfArrayOfString struct {
	ArrayOfString []*ArrayOfString `xml:"ArrayOfString,omitempty" json:"ArrayOfString,omitempty"`
}

type ArrayOfWorkflowRequestInfo struct {
	WorkflowRequestInfo []*WorkflowRequestInfo `xml:"WorkflowRequestInfo,omitempty" json:"WorkflowRequestInfo,omitempty"`
}

type WorkflowRequestInfo struct {
	CanEdit bool `xml:"canEdit,omitempty" json:"canEdit,omitempty"`

	CanView bool `xml:"canView,omitempty" json:"canView,omitempty"`

	CreateTime string `xml:"createTime,omitempty" json:"createTime,omitempty"`

	CreatorId string `xml:"creatorId,omitempty" json:"creatorId,omitempty"`

	CreatorName string `xml:"creatorName,omitempty" json:"creatorName,omitempty"`

	CurrentNodeId string `xml:"currentNodeId,omitempty" json:"currentNodeId,omitempty"`

	CurrentNodeName string `xml:"currentNodeName,omitempty" json:"currentNodeName,omitempty"`

	ForwardButtonName string `xml:"forwardButtonName,omitempty" json:"forwardButtonName,omitempty"`

	Isnextflow string `xml:"isnextflow,omitempty" json:"isnextflow,omitempty"`

	LastOperateTime string `xml:"lastOperateTime,omitempty" json:"lastOperateTime,omitempty"`

	LastOperatorName string `xml:"lastOperatorName,omitempty" json:"lastOperatorName,omitempty"`

	MessageType string `xml:"messageType,omitempty" json:"messageType,omitempty"`

	MustInputRemark bool `xml:"mustInputRemark,omitempty" json:"mustInputRemark,omitempty"`

	NeedAffirmance bool `xml:"needAffirmance,omitempty" json:"needAffirmance,omitempty"`

	ReceiveTime string `xml:"receiveTime,omitempty" json:"receiveTime,omitempty"`

	RejectButtonName string `xml:"rejectButtonName,omitempty" json:"rejectButtonName,omitempty"`

	Remark string `xml:"remark,omitempty" json:"remark,omitempty"`

	RequestId string `xml:"requestId,omitempty" json:"requestId,omitempty"`

	RequestLevel string `xml:"requestLevel,omitempty" json:"requestLevel,omitempty"`

	RequestName string `xml:"requestName,omitempty" json:"requestName,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	SubbackButtonName string `xml:"subbackButtonName,omitempty" json:"subbackButtonName,omitempty"`

	SubmitButtonName string `xml:"submitButtonName,omitempty" json:"submitButtonName,omitempty"`

	SubnobackButtonName string `xml:"subnobackButtonName,omitempty" json:"subnobackButtonName,omitempty"`

	WorkflowBaseInfo *WorkflowBaseInfo `xml:"workflowBaseInfo,omitempty" json:"workflowBaseInfo,omitempty"`

	WorkflowDetailTableInfos *ArrayOfWorkflowDetailTableInfo `xml:"workflowDetailTableInfos,omitempty" json:"workflowDetailTableInfos,omitempty"`

	WorkflowHtmlShow *ArrayOfString `xml:"workflowHtmlShow,omitempty" json:"workflowHtmlShow,omitempty"`

	WorkflowHtmlTemplete *ArrayOfString `xml:"workflowHtmlTemplete,omitempty" json:"workflowHtmlTemplete,omitempty"`

	WorkflowMainTableInfo *WorkflowMainTableInfo `xml:"workflowMainTableInfo,omitempty" json:"workflowMainTableInfo,omitempty"`

	WorkflowPhrases *ArrayOfArrayOfString `xml:"workflowPhrases,omitempty" json:"workflowPhrases,omitempty"`

	WorkflowRequestLogs *ArrayOfWorkflowRequestLog `xml:"workflowRequestLogs,omitempty" json:"workflowRequestLogs,omitempty"`
}

type ArrayOfWorkflowRequestLog struct {
	WorkflowRequestLog []*WorkflowRequestLog `xml:"WorkflowRequestLog,omitempty" json:"WorkflowRequestLog,omitempty"`
}

type WorkflowRequestLog struct {
	Agentor string `xml:"agentor,omitempty" json:"agentor,omitempty"`

	AgentorDept string `xml:"agentorDept,omitempty" json:"agentorDept,omitempty"`

	AnnexDocHtmls string `xml:"annexDocHtmls,omitempty" json:"annexDocHtmls,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	NodeId string `xml:"nodeId,omitempty" json:"nodeId,omitempty"`

	NodeName string `xml:"nodeName,omitempty" json:"nodeName,omitempty"`

	OperateDate string `xml:"operateDate,omitempty" json:"operateDate,omitempty"`

	OperateTime string `xml:"operateTime,omitempty" json:"operateTime,omitempty"`

	OperateType string `xml:"operateType,omitempty" json:"operateType,omitempty"`

	OperatorDept string `xml:"operatorDept,omitempty" json:"operatorDept,omitempty"`

	OperatorId string `xml:"operatorId,omitempty" json:"operatorId,omitempty"`

	OperatorName string `xml:"operatorName,omitempty" json:"operatorName,omitempty"`

	OperatorSign string `xml:"operatorSign,omitempty" json:"operatorSign,omitempty"`

	ReceivedPersons string `xml:"receivedPersons,omitempty" json:"receivedPersons,omitempty"`

	Remark string `xml:"remark,omitempty" json:"remark,omitempty"`

	RemarkSign string `xml:"remarkSign,omitempty" json:"remarkSign,omitempty"`

	SignDocHtmls string `xml:"signDocHtmls,omitempty" json:"signDocHtmls,omitempty"`

	SignWorkFlowHtmls string `xml:"signWorkFlowHtmls,omitempty" json:"signWorkFlowHtmls,omitempty"`
}

type WorkflowMainTableInfo struct {
	RequestRecords *ArrayOfWorkflowRequestTableRecord `xml:"requestRecords,omitempty" json:"requestRecords,omitempty"`

	TableDBName string `xml:"tableDBName,omitempty" json:"tableDBName,omitempty"`
}

type ArrayOfWorkflowRequestTableRecord struct {
	WorkflowRequestTableRecord []*WorkflowRequestTableRecord `xml:"WorkflowRequestTableRecord,omitempty" json:"WorkflowRequestTableRecord,omitempty"`
}

type WorkflowRequestTableRecord struct {
	RecordOrder int32 `xml:"recordOrder,omitempty" json:"recordOrder,omitempty"`

	WorkflowRequestTableFields *ArrayOfWorkflowRequestTableField `xml:"workflowRequestTableFields,omitempty" json:"workflowRequestTableFields,omitempty"`
}

type ArrayOfWorkflowRequestTableField struct {
	WorkflowRequestTableField []*WorkflowRequestTableField `xml:"WorkflowRequestTableField,omitempty" json:"WorkflowRequestTableField,omitempty"`
}

type WorkflowRequestTableField struct {
	Browserurl string `xml:"browserurl,omitempty" json:"browserurl,omitempty"`

	Edit bool `xml:"edit,omitempty" json:"edit,omitempty"`

	FieldDBType string `xml:"fieldDBType,omitempty" json:"fieldDBType,omitempty"`

	FieldFormName string `xml:"fieldFormName,omitempty" json:"fieldFormName,omitempty"`

	FieldHtmlType string `xml:"fieldHtmlType,omitempty" json:"fieldHtmlType,omitempty"`

	FieldId string `xml:"fieldId,omitempty" json:"fieldId,omitempty"`

	FieldName string `xml:"fieldName,omitempty" json:"fieldName,omitempty"`

	FieldOrder int32 `xml:"fieldOrder,omitempty" json:"fieldOrder,omitempty"`

	FieldShowName string `xml:"fieldShowName,omitempty" json:"fieldShowName,omitempty"`

	FieldShowValue string `xml:"fieldShowValue,omitempty" json:"fieldShowValue,omitempty"`

	FieldType string `xml:"fieldType,omitempty" json:"fieldType,omitempty"`

	FieldValue string `xml:"fieldValue,omitempty" json:"fieldValue,omitempty"`

	FiledHtmlShow string `xml:"filedHtmlShow,omitempty" json:"filedHtmlShow,omitempty"`

	Mand bool `xml:"mand,omitempty" json:"mand,omitempty"`

	Selectnames *ArrayOfString `xml:"selectnames,omitempty" json:"selectnames,omitempty"`

	Selectvalues *ArrayOfString `xml:"selectvalues,omitempty" json:"selectvalues,omitempty"`

	View bool `xml:"view,omitempty" json:"view,omitempty"`
}

type WorkflowBaseInfo struct {
	WorkflowId string `xml:"workflowId,omitempty" json:"workflowId,omitempty"`

	WorkflowName string `xml:"workflowName,omitempty" json:"workflowName,omitempty"`

	WorkflowTypeId string `xml:"workflowTypeId,omitempty" json:"workflowTypeId,omitempty"`

	WorkflowTypeName string `xml:"workflowTypeName,omitempty" json:"workflowTypeName,omitempty"`
}

type ArrayOfWorkflowDetailTableInfo struct {
	WorkflowDetailTableInfo []*WorkflowDetailTableInfo `xml:"WorkflowDetailTableInfo,omitempty" json:"WorkflowDetailTableInfo,omitempty"`
}

type WorkflowDetailTableInfo struct {
	TableDBName string `xml:"tableDBName,omitempty" json:"tableDBName,omitempty"`

	TableFieldName *ArrayOfString `xml:"tableFieldName,omitempty" json:"tableFieldName,omitempty"`

	TableTitle string `xml:"tableTitle,omitempty" json:"tableTitle,omitempty"`

	WorkflowRequestTableRecords *ArrayOfWorkflowRequestTableRecord `xml:"workflowRequestTableRecords,omitempty" json:"workflowRequestTableRecords,omitempty"`
}

type ArrayOfWorkflowBaseInfo struct {
	WorkflowBaseInfo []*WorkflowBaseInfo `xml:"WorkflowBaseInfo,omitempty" json:"WorkflowBaseInfo,omitempty"`
}

type WorkflowServicePortType interface {
	Forward2WorkflowRequest(request *Forward2WorkflowRequest) (*Forward2WorkflowRequestResponse, error)

	Forward2WorkflowRequestContext(ctx context.Context, request *Forward2WorkflowRequest) (*Forward2WorkflowRequestResponse, error)

	GetAllWorkflowRequestList(request *GetAllWorkflowRequestList) (*GetAllWorkflowRequestListResponse, error)

	GetAllWorkflowRequestListContext(ctx context.Context, request *GetAllWorkflowRequestList) (*GetAllWorkflowRequestListResponse, error)

	GetWorkflowRequest(request *GetWorkflowRequest) (*GetWorkflowRequestResponse, error)

	GetWorkflowRequestContext(ctx context.Context, request *GetWorkflowRequest) (*GetWorkflowRequestResponse, error)

	GetHendledWorkflowRequestList(request *GetHendledWorkflowRequestList) (*GetHendledWorkflowRequestListResponse, error)

	GetHendledWorkflowRequestListContext(ctx context.Context, request *GetHendledWorkflowRequestList) (*GetHendledWorkflowRequestListResponse, error)

	GetToDoWorkflowRequestList(request *GetToDoWorkflowRequestList) (*GetToDoWorkflowRequestListResponse, error)

	GetToDoWorkflowRequestListContext(ctx context.Context, request *GetToDoWorkflowRequestList) (*GetToDoWorkflowRequestListResponse, error)

	GetWorkflowRequest4split(request *GetWorkflowRequest4split) (*GetWorkflowRequest4splitResponse, error)

	GetWorkflowRequest4splitContext(ctx context.Context, request *GetWorkflowRequest4split) (*GetWorkflowRequest4splitResponse, error)

	SubmitWorkflowRequest(request *SubmitWorkflowRequest) (*SubmitWorkflowRequestResponse, error)

	SubmitWorkflowRequestContext(ctx context.Context, request *SubmitWorkflowRequest) (*SubmitWorkflowRequestResponse, error)

	GetHendledWorkflowRequestCount(request *GetHendledWorkflowRequestCount) (*GetHendledWorkflowRequestCountResponse, error)

	GetHendledWorkflowRequestCountContext(ctx context.Context, request *GetHendledWorkflowRequestCount) (*GetHendledWorkflowRequestCountResponse, error)

	GetLeaveDays(request *GetLeaveDays) (*GetLeaveDaysResponse, error)

	GetLeaveDaysContext(ctx context.Context, request *GetLeaveDays) (*GetLeaveDaysResponse, error)

	GetCreateWorkflowList(request *GetCreateWorkflowList) (*GetCreateWorkflowListResponse, error)

	GetCreateWorkflowListContext(ctx context.Context, request *GetCreateWorkflowList) (*GetCreateWorkflowListResponse, error)

	GetCreateWorkflowCount(request *GetCreateWorkflowCount) (*GetCreateWorkflowCountResponse, error)

	GetCreateWorkflowCountContext(ctx context.Context, request *GetCreateWorkflowCount) (*GetCreateWorkflowCountResponse, error)

	GetProcessedWorkflowRequestCount(request *GetProcessedWorkflowRequestCount) (*GetProcessedWorkflowRequestCountResponse, error)

	GetProcessedWorkflowRequestCountContext(ctx context.Context, request *GetProcessedWorkflowRequestCount) (*GetProcessedWorkflowRequestCountResponse, error)

	ForwardWorkflowRequest(request *ForwardWorkflowRequest) (*ForwardWorkflowRequestResponse, error)

	ForwardWorkflowRequestContext(ctx context.Context, request *ForwardWorkflowRequest) (*ForwardWorkflowRequestResponse, error)

	DoCreateWorkflowRequest(request *DoCreateWorkflowRequest) (*DoCreateWorkflowRequestResponse, error)

	DoCreateWorkflowRequestContext(ctx context.Context, request *DoCreateWorkflowRequest) (*DoCreateWorkflowRequestResponse, error)

	DoForceOver(request *DoForceOver) (*DoForceOverResponse, error)

	DoForceOverContext(ctx context.Context, request *DoForceOver) (*DoForceOverResponse, error)

	GetCCWorkflowRequestCount(request *GetCCWorkflowRequestCount) (*GetCCWorkflowRequestCountResponse, error)

	GetCCWorkflowRequestCountContext(ctx context.Context, request *GetCCWorkflowRequestCount) (*GetCCWorkflowRequestCountResponse, error)

	GetProcessedWorkflowRequestList(request *GetProcessedWorkflowRequestList) (*GetProcessedWorkflowRequestListResponse, error)

	GetProcessedWorkflowRequestListContext(ctx context.Context, request *GetProcessedWorkflowRequestList) (*GetProcessedWorkflowRequestListResponse, error)

	GetAllWorkflowRequestCount(request *GetAllWorkflowRequestCount) (*GetAllWorkflowRequestCountResponse, error)

	GetAllWorkflowRequestCountContext(ctx context.Context, request *GetAllWorkflowRequestCount) (*GetAllWorkflowRequestCountResponse, error)

	GetCreateWorkflowRequestInfo(request *GetCreateWorkflowRequestInfo) (*GetCreateWorkflowRequestInfoResponse, error)

	GetCreateWorkflowRequestInfoContext(ctx context.Context, request *GetCreateWorkflowRequestInfo) (*GetCreateWorkflowRequestInfoResponse, error)

	GetMyWorkflowRequestList(request *GetMyWorkflowRequestList) (*GetMyWorkflowRequestListResponse, error)

	GetMyWorkflowRequestListContext(ctx context.Context, request *GetMyWorkflowRequestList) (*GetMyWorkflowRequestListResponse, error)

	GetCreateWorkflowTypeList(request *GetCreateWorkflowTypeList) (*GetCreateWorkflowTypeListResponse, error)

	GetCreateWorkflowTypeListContext(ctx context.Context, request *GetCreateWorkflowTypeList) (*GetCreateWorkflowTypeListResponse, error)

	GetMyWorkflowRequestCount(request *GetMyWorkflowRequestCount) (*GetMyWorkflowRequestCountResponse, error)

	GetMyWorkflowRequestCountContext(ctx context.Context, request *GetMyWorkflowRequestCount) (*GetMyWorkflowRequestCountResponse, error)

	GetWorkflowNewFlag(request *GetWorkflowNewFlag) (*GetWorkflowNewFlagResponse, error)

	GetWorkflowNewFlagContext(ctx context.Context, request *GetWorkflowNewFlag) (*GetWorkflowNewFlagResponse, error)

	WriteWorkflowReadFlag(request *WriteWorkflowReadFlag) (*WriteWorkflowReadFlagResponse, error)

	WriteWorkflowReadFlagContext(ctx context.Context, request *WriteWorkflowReadFlag) (*WriteWorkflowReadFlagResponse, error)

	GetToDoWorkflowRequestCount(request *GetToDoWorkflowRequestCount) (*GetToDoWorkflowRequestCountResponse, error)

	GetToDoWorkflowRequestCountContext(ctx context.Context, request *GetToDoWorkflowRequestCount) (*GetToDoWorkflowRequestCountResponse, error)

	GivingOpinions(request *GivingOpinions) (*GivingOpinionsResponse, error)

	GivingOpinionsContext(ctx context.Context, request *GivingOpinions) (*GivingOpinionsResponse, error)

	GetCreateWorkflowTypeCount(request *GetCreateWorkflowTypeCount) (*GetCreateWorkflowTypeCountResponse, error)

	GetCreateWorkflowTypeCountContext(ctx context.Context, request *GetCreateWorkflowTypeCount) (*GetCreateWorkflowTypeCountResponse, error)

	GetWorkflowRequestLogs(request *GetWorkflowRequestLogs) (*GetWorkflowRequestLogsResponse, error)

	GetWorkflowRequestLogsContext(ctx context.Context, request *GetWorkflowRequestLogs) (*GetWorkflowRequestLogsResponse, error)

	DeleteRequest(request *DeleteRequest) (*DeleteRequestResponse, error)

	DeleteRequestContext(ctx context.Context, request *DeleteRequest) (*DeleteRequestResponse, error)

	GetCCWorkflowRequestList(request *GetCCWorkflowRequestList) (*GetCCWorkflowRequestListResponse, error)

	GetCCWorkflowRequestListContext(ctx context.Context, request *GetCCWorkflowRequestList) (*GetCCWorkflowRequestListResponse, error)

	GetUserId(request *GetUserId) (*GetUserIdResponse, error)

	GetUserIdContext(ctx context.Context, request *GetUserId) (*GetUserIdResponse, error)
}

type workflowServicePortType struct {
	client *soap.Client
}

func NewWorkflowServicePortType(client *soap.Client) WorkflowServicePortType {
	return &workflowServicePortType{
		client: client,
	}
}

func (service *workflowServicePortType) Forward2WorkflowRequestContext(ctx context.Context, request *Forward2WorkflowRequest) (*Forward2WorkflowRequestResponse, error) {
	response := new(Forward2WorkflowRequestResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.forward2WorkflowRequest", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) Forward2WorkflowRequest(request *Forward2WorkflowRequest) (*Forward2WorkflowRequestResponse, error) {
	return service.Forward2WorkflowRequestContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetAllWorkflowRequestListContext(ctx context.Context, request *GetAllWorkflowRequestList) (*GetAllWorkflowRequestListResponse, error) {
	response := new(GetAllWorkflowRequestListResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getAllWorkflowRequestList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetAllWorkflowRequestList(request *GetAllWorkflowRequestList) (*GetAllWorkflowRequestListResponse, error) {
	return service.GetAllWorkflowRequestListContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetWorkflowRequestContext(ctx context.Context, request *GetWorkflowRequest) (*GetWorkflowRequestResponse, error) {
	response := new(GetWorkflowRequestResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getWorkflowRequest", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetWorkflowRequest(request *GetWorkflowRequest) (*GetWorkflowRequestResponse, error) {
	return service.GetWorkflowRequestContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetHendledWorkflowRequestListContext(ctx context.Context, request *GetHendledWorkflowRequestList) (*GetHendledWorkflowRequestListResponse, error) {
	response := new(GetHendledWorkflowRequestListResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getHendledWorkflowRequestList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetHendledWorkflowRequestList(request *GetHendledWorkflowRequestList) (*GetHendledWorkflowRequestListResponse, error) {
	return service.GetHendledWorkflowRequestListContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetToDoWorkflowRequestListContext(ctx context.Context, request *GetToDoWorkflowRequestList) (*GetToDoWorkflowRequestListResponse, error) {
	response := new(GetToDoWorkflowRequestListResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getToDoWorkflowRequestList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetToDoWorkflowRequestList(request *GetToDoWorkflowRequestList) (*GetToDoWorkflowRequestListResponse, error) {
	return service.GetToDoWorkflowRequestListContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetWorkflowRequest4splitContext(ctx context.Context, request *GetWorkflowRequest4split) (*GetWorkflowRequest4splitResponse, error) {
	response := new(GetWorkflowRequest4splitResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getWorkflowRequest4split", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetWorkflowRequest4split(request *GetWorkflowRequest4split) (*GetWorkflowRequest4splitResponse, error) {
	return service.GetWorkflowRequest4splitContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) SubmitWorkflowRequestContext(ctx context.Context, request *SubmitWorkflowRequest) (*SubmitWorkflowRequestResponse, error) {
	response := new(SubmitWorkflowRequestResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.submitWorkflowRequest", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) SubmitWorkflowRequest(request *SubmitWorkflowRequest) (*SubmitWorkflowRequestResponse, error) {
	return service.SubmitWorkflowRequestContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetHendledWorkflowRequestCountContext(ctx context.Context, request *GetHendledWorkflowRequestCount) (*GetHendledWorkflowRequestCountResponse, error) {
	response := new(GetHendledWorkflowRequestCountResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getHendledWorkflowRequestCount", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetHendledWorkflowRequestCount(request *GetHendledWorkflowRequestCount) (*GetHendledWorkflowRequestCountResponse, error) {
	return service.GetHendledWorkflowRequestCountContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetLeaveDaysContext(ctx context.Context, request *GetLeaveDays) (*GetLeaveDaysResponse, error) {
	response := new(GetLeaveDaysResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getLeaveDays", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetLeaveDays(request *GetLeaveDays) (*GetLeaveDaysResponse, error) {
	return service.GetLeaveDaysContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetCreateWorkflowListContext(ctx context.Context, request *GetCreateWorkflowList) (*GetCreateWorkflowListResponse, error) {
	response := new(GetCreateWorkflowListResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetCreateWorkflowList(request *GetCreateWorkflowList) (*GetCreateWorkflowListResponse, error) {
	return service.GetCreateWorkflowListContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetCreateWorkflowCountContext(ctx context.Context, request *GetCreateWorkflowCount) (*GetCreateWorkflowCountResponse, error) {
	response := new(GetCreateWorkflowCountResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowCount", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetCreateWorkflowCount(request *GetCreateWorkflowCount) (*GetCreateWorkflowCountResponse, error) {
	return service.GetCreateWorkflowCountContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetProcessedWorkflowRequestCountContext(ctx context.Context, request *GetProcessedWorkflowRequestCount) (*GetProcessedWorkflowRequestCountResponse, error) {
	response := new(GetProcessedWorkflowRequestCountResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getProcessedWorkflowRequestCount", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetProcessedWorkflowRequestCount(request *GetProcessedWorkflowRequestCount) (*GetProcessedWorkflowRequestCountResponse, error) {
	return service.GetProcessedWorkflowRequestCountContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) ForwardWorkflowRequestContext(ctx context.Context, request *ForwardWorkflowRequest) (*ForwardWorkflowRequestResponse, error) {
	response := new(ForwardWorkflowRequestResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.forwardWorkflowRequest", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) ForwardWorkflowRequest(request *ForwardWorkflowRequest) (*ForwardWorkflowRequestResponse, error) {
	return service.ForwardWorkflowRequestContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) DoCreateWorkflowRequestContext(ctx context.Context, request *DoCreateWorkflowRequest) (*DoCreateWorkflowRequestResponse, error) {
	response := new(DoCreateWorkflowRequestResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.doCreateWorkflowRequest", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) DoCreateWorkflowRequest(request *DoCreateWorkflowRequest) (*DoCreateWorkflowRequestResponse, error) {
	return service.DoCreateWorkflowRequestContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) DoForceOverContext(ctx context.Context, request *DoForceOver) (*DoForceOverResponse, error) {
	response := new(DoForceOverResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.doForceOver", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) DoForceOver(request *DoForceOver) (*DoForceOverResponse, error) {
	return service.DoForceOverContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetCCWorkflowRequestCountContext(ctx context.Context, request *GetCCWorkflowRequestCount) (*GetCCWorkflowRequestCountResponse, error) {
	response := new(GetCCWorkflowRequestCountResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getCCWorkflowRequestCount", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetCCWorkflowRequestCount(request *GetCCWorkflowRequestCount) (*GetCCWorkflowRequestCountResponse, error) {
	return service.GetCCWorkflowRequestCountContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetProcessedWorkflowRequestListContext(ctx context.Context, request *GetProcessedWorkflowRequestList) (*GetProcessedWorkflowRequestListResponse, error) {
	response := new(GetProcessedWorkflowRequestListResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getProcessedWorkflowRequestList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetProcessedWorkflowRequestList(request *GetProcessedWorkflowRequestList) (*GetProcessedWorkflowRequestListResponse, error) {
	return service.GetProcessedWorkflowRequestListContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetAllWorkflowRequestCountContext(ctx context.Context, request *GetAllWorkflowRequestCount) (*GetAllWorkflowRequestCountResponse, error) {
	response := new(GetAllWorkflowRequestCountResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getAllWorkflowRequestCount", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetAllWorkflowRequestCount(request *GetAllWorkflowRequestCount) (*GetAllWorkflowRequestCountResponse, error) {
	return service.GetAllWorkflowRequestCountContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetCreateWorkflowRequestInfoContext(ctx context.Context, request *GetCreateWorkflowRequestInfo) (*GetCreateWorkflowRequestInfoResponse, error) {
	response := new(GetCreateWorkflowRequestInfoResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowRequestInfo", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetCreateWorkflowRequestInfo(request *GetCreateWorkflowRequestInfo) (*GetCreateWorkflowRequestInfoResponse, error) {
	return service.GetCreateWorkflowRequestInfoContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetMyWorkflowRequestListContext(ctx context.Context, request *GetMyWorkflowRequestList) (*GetMyWorkflowRequestListResponse, error) {
	response := new(GetMyWorkflowRequestListResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getMyWorkflowRequestList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetMyWorkflowRequestList(request *GetMyWorkflowRequestList) (*GetMyWorkflowRequestListResponse, error) {
	return service.GetMyWorkflowRequestListContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetCreateWorkflowTypeListContext(ctx context.Context, request *GetCreateWorkflowTypeList) (*GetCreateWorkflowTypeListResponse, error) {
	response := new(GetCreateWorkflowTypeListResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowTypeList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetCreateWorkflowTypeList(request *GetCreateWorkflowTypeList) (*GetCreateWorkflowTypeListResponse, error) {
	return service.GetCreateWorkflowTypeListContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetMyWorkflowRequestCountContext(ctx context.Context, request *GetMyWorkflowRequestCount) (*GetMyWorkflowRequestCountResponse, error) {
	response := new(GetMyWorkflowRequestCountResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getMyWorkflowRequestCount", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetMyWorkflowRequestCount(request *GetMyWorkflowRequestCount) (*GetMyWorkflowRequestCountResponse, error) {
	return service.GetMyWorkflowRequestCountContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetWorkflowNewFlagContext(ctx context.Context, request *GetWorkflowNewFlag) (*GetWorkflowNewFlagResponse, error) {
	response := new(GetWorkflowNewFlagResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getWorkflowNewFlag", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetWorkflowNewFlag(request *GetWorkflowNewFlag) (*GetWorkflowNewFlagResponse, error) {
	return service.GetWorkflowNewFlagContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) WriteWorkflowReadFlagContext(ctx context.Context, request *WriteWorkflowReadFlag) (*WriteWorkflowReadFlagResponse, error) {
	response := new(WriteWorkflowReadFlagResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.writeWorkflowReadFlag", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) WriteWorkflowReadFlag(request *WriteWorkflowReadFlag) (*WriteWorkflowReadFlagResponse, error) {
	return service.WriteWorkflowReadFlagContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetToDoWorkflowRequestCountContext(ctx context.Context, request *GetToDoWorkflowRequestCount) (*GetToDoWorkflowRequestCountResponse, error) {
	response := new(GetToDoWorkflowRequestCountResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getToDoWorkflowRequestCount", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetToDoWorkflowRequestCount(request *GetToDoWorkflowRequestCount) (*GetToDoWorkflowRequestCountResponse, error) {
	return service.GetToDoWorkflowRequestCountContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GivingOpinionsContext(ctx context.Context, request *GivingOpinions) (*GivingOpinionsResponse, error) {
	response := new(GivingOpinionsResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.givingOpinions", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GivingOpinions(request *GivingOpinions) (*GivingOpinionsResponse, error) {
	return service.GivingOpinionsContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetCreateWorkflowTypeCountContext(ctx context.Context, request *GetCreateWorkflowTypeCount) (*GetCreateWorkflowTypeCountResponse, error) {
	response := new(GetCreateWorkflowTypeCountResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getCreateWorkflowTypeCount", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetCreateWorkflowTypeCount(request *GetCreateWorkflowTypeCount) (*GetCreateWorkflowTypeCountResponse, error) {
	return service.GetCreateWorkflowTypeCountContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetWorkflowRequestLogsContext(ctx context.Context, request *GetWorkflowRequestLogs) (*GetWorkflowRequestLogsResponse, error) {
	response := new(GetWorkflowRequestLogsResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getWorkflowRequestLogs", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetWorkflowRequestLogs(request *GetWorkflowRequestLogs) (*GetWorkflowRequestLogsResponse, error) {
	return service.GetWorkflowRequestLogsContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) DeleteRequestContext(ctx context.Context, request *DeleteRequest) (*DeleteRequestResponse, error) {
	response := new(DeleteRequestResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.deleteRequest", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) DeleteRequest(request *DeleteRequest) (*DeleteRequestResponse, error) {
	return service.DeleteRequestContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetCCWorkflowRequestListContext(ctx context.Context, request *GetCCWorkflowRequestList) (*GetCCWorkflowRequestListResponse, error) {
	response := new(GetCCWorkflowRequestListResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getCCWorkflowRequestList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetCCWorkflowRequestList(request *GetCCWorkflowRequestList) (*GetCCWorkflowRequestListResponse, error) {
	return service.GetCCWorkflowRequestListContext(
		context.Background(),
		request,
	)
}

func (service *workflowServicePortType) GetUserIdContext(ctx context.Context, request *GetUserId) (*GetUserIdResponse, error) {
	response := new(GetUserIdResponse)
	err := service.client.CallContext(ctx, "urn:weaver.workflow.webservices.WorkflowService.getUserid", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *workflowServicePortType) GetUserId(request *GetUserId) (*GetUserIdResponse, error) {
	return service.GetUserIdContext(
		context.Background(),
		request,
	)
}
